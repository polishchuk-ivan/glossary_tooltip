<?php

/**
 * @file
 * Install, update and uninstall functions for the Glossary Tooltip module.
 */

use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\Entity\Vocabulary;

/**
 * Implements hook_install().
 */
function glossary_tooltip_install(): void
{
  $messenger = \Drupal::messenger();
  if (!Vocabulary::load('glossary')) {
    $vocabulary = Vocabulary::create([
      'vid' => 'glossary',
      'name' => t('Glossary'),
      'description' => t('A vocabulary for glossary terms with descriptions.'),
      'weight' => 0,
    ]);
    $vocabulary->save();
    $messenger->addStatus(t('Taxonomy vocabulary "Glossary" created.'));
  }

  $termsData = [
    [
      'name' => 'Canine',
      'description' => 'A dog-like animal, including dogs, wolves, and foxes.',
    ],
    [
      'name' => 'Feline',
      'description' => 'A cat-like animal, like domestic cats, lions, and tigers.',
    ],
    [
      'name' => 'Herbivore',
      'description' => 'An animal that eats only plants, e.g., deer and cows.',
    ],
    [
      'name' => 'Carnivore',
      'description' => 'An animal that primarily eats meat, e.g., lions and wolves.',
    ],
    [
      'name' => 'Omnivore',
      'description' => 'An animal that eats both plants and meat, e.g., humans and bears.',
    ],
  ];

  foreach ($termsData as $termData) {
    $existingTerm = \Drupal::entityQuery('taxonomy_term')
      ->condition('vid', 'glossary')
      ->condition('name', $termData['name'])
      ->count()
      ->execute();

    if ($existingTerm == 0) {
      $term = Term::create([
        'vid' => 'glossary',
        'name' => $termData['name'],
        'description' => [
          'value' => $termData['description'],
          'format' => 'basic_html',
        ],
      ]);
      $term->save();
      $messenger->addStatus(t('Glossary term "@name" created.', ['@name' => $termData['name']]));
    } else {
      $messenger->addStatus(t('Glossary term "@name" already exists, skipping creation.', ['@name' => $termData['name']]));
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function glossary_tooltip_uninstall(): void
{
  $messenger = \Drupal::messenger();

  $tids = \Drupal::entityQuery('taxonomy_term')
    ->condition('vid', 'glossary')
    ->execute();

  if (!empty($tids)) {
    $termStorage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
    $entities = $termStorage->loadMultiple($tids);
    $termStorage->delete($entities);
    $messenger->addStatus(t('All glossary terms deleted.'));
  }

  $vocabulary = Vocabulary::load('glossary');
  if ($vocabulary) {
    $vocabulary->delete();
    $messenger->addStatus(t('Taxonomy vocabulary "Glossary" deleted.'));
  }
}

/**
 * Implements hook_schema().
 */
function glossary_tooltip_schema(): array
{
  $schema['glossary_tooltip_example'] = [
    'description' => 'Table description.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => true,
        'description' => 'Primary Key: Unique record ID.',
      ],
      'uid' => [
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
        'default' => 0,
        'description' => 'The {users}.uid of the user who created the record.',
      ],
      'status' => [
        'description' => 'Boolean indicating whether this record is active.',
        'type' => 'int',
        'unsigned' => true,
        'not null' => true,
        'default' => 0,
        'size' => 'tiny',
      ],
      'type' => [
        'type' => 'varchar_ascii',
        'length' => 64,
        'not null' => true,
        'default' => '',
        'description' => 'Type of the record.',
      ],
      'created' => [
        'type' => 'int',
        'not null' => true,
        'default' => 0,
        'description' => 'Timestamp when the record was created.',
      ],
      'data' => [
        'type' => 'blob',
        'not null' => true,
        'size' => 'big',
        'description' => 'The arbitrary data for the item.',
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'type' => ['type'],
      'uid' => ['uid'],
      'status' => ['status'],
    ],
  ];

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function glossary_tooltip_requirements($phase): array
{
  $requirements = [];

  if ($phase == 'runtime') {
    $value = mt_rand(0, 100);
    $requirements['glossary_tooltip_status'] = [
      'title' => t('Glossary Tooltip status'),
      'value' => t('Glossary Tooltip value: @value', ['@value' => $value]),
      'severity' => $value > 50 ? REQUIREMENT_INFO : REQUIREMENT_WARNING,
    ];
  }

  return $requirements;
}
